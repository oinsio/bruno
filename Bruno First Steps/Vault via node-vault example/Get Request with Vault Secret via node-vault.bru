meta {
  name: Get Request with Vault Secret via node-vault
  type: http
  seq: 1
}

get {
  url: {{protocol}}://{{baseUrl}}/api/v1/hello
  body: none
  auth: none
}

assert {
  res.status: eq 200
  res.body.success: eq true
  res.headers['x-request-id']: eq {{uuid}}
}

script:pre-request {
  if (bru.getEnvVar("useNodeVault") === 'true') { // Get secret via node-vault. Developer mode should be enabled in Bruno
    
    console.log('Start reading secret from Vault via node-vault lib...');
    
    // Set environment Vault token
    bru.setVar('ENV_X_VAULT_TOKEN', bru.getProcessEnv(bru.getEnvVar('ENVIRONMENT_PREFIX') + "X_VAULT_TOKEN"));
    
    // Configure node-vault
    var vault = require("node-vault")({
      apiVersion: "v1",
      endpoint: bru.getEnvVar("vaultBaseUrl"),
      token: bru.getVar('ENV_X_VAULT_TOKEN')
    });
  
    // Read secret "secret/data/bruno" from Vault
    const brunoSecret = await vault.read("secret/data/bruno");
    console.log('Secret from Vault:', brunoSecret);
    // Extract secret value
    const secret = brunoSecret.data.data[bru.getEnvVar("vaultSecretName")];  
    console.log('Secret value:', secret);
  } else {
    console.log('Skip reading secret from Vault via node-vault.');
  }
}

docs {
  # Example of using an external lib
  [Developer Mode](https://docs.usebruno.com/get-started/javascript-sandbox) should be enabled in Bruno to use [external libraries](https://docs.usebruno.com/scripting/external-libraries).
  You can find an example of using [node-vault](https://www.npmjs.com/package/node-vault) lib in the `Pre Request` section of this API request. It is used to get `secret/data/bruno` secret and its value.
  
  To make this example working do the follow:
  1. Enable [Developer Mode](https://docs.usebruno.com/get-started/javascript-sandbox).
  2. Set `true` value for `useNodeVault` environment variable.
  3. Open `Tools` -> `Chrome Console` to check console log messages.
  
  
  # 'Hello, World!' API
  A simple GET API
  ```
  {baseURL}/api/v1/hello
  ```
  It response with JSON object:
  ```
  {
    "success": true,
    "data": {
      "message": "Hello, World!"
    }
  }
  ```
  If you send **X-Request-ID** request header, its value will be returned in **x-request-id** one. For example:
  ```
  > GET http://localhost:3000/api/v1/hello
  > X-Request-ID: 67743ff3-f33e-4122-aca8-1b196058e7cc
  
  < 200 OK
  < content-type: application/json
  < x-request-id: 67743ff3-f33e-4122-aca8-1b196058e7cc
  ```
}
